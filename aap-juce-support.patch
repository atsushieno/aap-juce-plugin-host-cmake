diff --git a/extras/AudioPluginHost/CMakeLists.txt b/extras/AudioPluginHost/CMakeLists.txt
index 852796383..6fd2c22aa 100644
--- a/extras/AudioPluginHost/CMakeLists.txt
+++ b/extras/AudioPluginHost/CMakeLists.txt
@@ -82,3 +82,49 @@ target_link_libraries(AudioPluginHost PRIVATE
     juce::juce_recommended_warning_flags)
 
 juce_add_bundle_resources_directory(AudioPluginHost ../../examples/Assets)
+
+# begin JUCEAAP specific -->
+# It is not beautiful, but there does not seem to be any way to add custom include directory for modules.
+include_directories(
+        "${AAP_DIR}/include"
+)
+
+find_package (androidaudioplugin REQUIRED CONFIG)
+
+juce_add_module(${AAP_JUCE_DIR}/aap-modules/aap_audio_plugin_client)
+target_link_libraries(AudioPluginHost
+        PRIVATE
+        aap_audio_plugin_client
+)
+
+if (ANDROID)
+
+# dependencies
+find_library(log "log")
+find_library(android "android")
+find_library(glesv2 "GLESv2")
+find_library(egl "EGL")
+set(cpufeatures_lib "cpufeatures")
+set(oboe_lib "oboe")
+set(CMAKE_CXX_FLAGS_RELEASE "-O3")
+
+target_compile_definitions(AudioPluginHost
+    PRIVATE
+    [[JUCE_ANDROID=1]]
+    [[JUCE_DONT_AUTO_OPEN_MIDI_DEVICES_ON_MOBILE=1]]
+    [[JUCEAAP_USE_UNIQUE_ID=1]]
+    [[JUCEAAP_HOSTED_PARAMETER=1]]
+)
+
+target_link_libraries(AudioPluginHost
+        PRIVATE
+        ${log}
+        ${android}
+        ${glesv2}
+        ${egl}
+        #${cpufeatures_lib}
+        androidaudioplugin::androidaudioplugin
+)
+
+endif (ANDROID)
+# <-- end JUCEAAP specific
diff --git a/extras/AudioPluginHost/Source/HostStartup.cpp b/extras/AudioPluginHost/Source/HostStartup.cpp
index b3c5e4ba7..1ae3fba0a 100644
--- a/extras/AudioPluginHost/Source/HostStartup.cpp
+++ b/extras/AudioPluginHost/Source/HostStartup.cpp
@@ -28,7 +28,7 @@
 #include "Plugins/InternalPlugins.h"
 
 #if ! (JUCE_PLUGINHOST_VST || JUCE_PLUGINHOST_VST3 || JUCE_PLUGINHOST_AU)
- #error "If you're building the audio plugin host, you probably want to enable VST and/or AU support"
+// #error "If you're building the audio plugin host, you probably want to enable VST and/or AU support"
 #endif
 
 class PluginScannerSubprocess final : private ChildProcessWorker,
diff --git a/extras/AudioPluginHost/Source/Plugins/InternalPlugins.cpp b/extras/AudioPluginHost/Source/Plugins/InternalPlugins.cpp
index 52ea0ce45..e42acc02d 100644
--- a/extras/AudioPluginHost/Source/Plugins/InternalPlugins.cpp
+++ b/extras/AudioPluginHost/Source/Plugins/InternalPlugins.cpp
@@ -442,15 +442,15 @@ InternalPluginFormat::InternalPluginFormat()
         [] { return std::make_unique<InternalPlugin> (std::make_unique<SineWaveSynth>()); },
         [] { return std::make_unique<InternalPlugin> (std::make_unique<ReverbPlugin>()); },
 
-        [] { return std::make_unique<InternalPlugin> (std::make_unique<AUv3SynthProcessor>()); },
+        //[] { return std::make_unique<InternalPlugin> (std::make_unique<AUv3SynthProcessor>()); },
         [] { return std::make_unique<InternalPlugin> (std::make_unique<Arpeggiator>()); },
-        [] { return std::make_unique<InternalPlugin> (std::make_unique<DspModulePluginDemoAudioProcessor>()); },
+        //[] { return std::make_unique<InternalPlugin> (std::make_unique<DspModulePluginDemoAudioProcessor>()); },
         [] { return std::make_unique<InternalPlugin> (std::make_unique<GainProcessor>()); },
         [] { return std::make_unique<InternalPlugin> (std::make_unique<JuceDemoPluginAudioProcessor>()); },
         [] { return std::make_unique<InternalPlugin> (std::make_unique<MidiLoggerPluginDemoProcessor>()); },
-        [] { return std::make_unique<InternalPlugin> (std::make_unique<MultiOutSynth>()); },
+        //[] { return std::make_unique<InternalPlugin> (std::make_unique<MultiOutSynth>()); },
         [] { return std::make_unique<InternalPlugin> (std::make_unique<NoiseGate>()); },
-        [] { return std::make_unique<InternalPlugin> (std::make_unique<SamplerAudioProcessor>()); },
+        //[] { return std::make_unique<InternalPlugin> (std::make_unique<SamplerAudioProcessor>()); },
         [] { return std::make_unique<InternalPlugin> (std::make_unique<SurroundProcessor>()); }
     }
 {
diff --git a/extras/AudioPluginHost/Source/UI/GraphEditorPanel.cpp b/extras/AudioPluginHost/Source/UI/GraphEditorPanel.cpp
index 8b59d4bb7..cbdf68595 100644
--- a/extras/AudioPluginHost/Source/UI/GraphEditorPanel.cpp
+++ b/extras/AudioPluginHost/Source/UI/GraphEditorPanel.cpp
@@ -27,9 +27,10 @@
 #include "GraphEditorPanel.h"
 #include "../Plugins/InternalPlugins.h"
 #include "MainHostWindow.h"
+#include "aap_audio_plugin_client/aap_audio_plugin_client.h"
 
 //==============================================================================
-#if JUCE_IOS
+#if JUCE_IOS || JUCE_ANDROID
  class AUScanner
  {
  public:
@@ -44,7 +45,13 @@
 
  private:
      KnownPluginList& knownPluginList;
+#if JUCE_IOS
      AudioUnitPluginFormat formatToScan;
+#else
+#if JUCE_ANDROID
+     juceaap::AndroidAudioPluginFormat formatToScan;
+#endif
+#endif
 
      std::unique_ptr<PluginDirectoryScanner> scanner;
      FileSearchPath paths;
@@ -1145,7 +1152,7 @@ struct GraphDocumentComponent::PluginListBoxModel final : public ListBoxModel,
         knownPlugins.addChangeListener (this);
         owner.addMouseListener (this, true);
 
-       #if JUCE_IOS
+       #if JUCE_IOS || JUCE_ANDROID
         scanner.reset (new AUScanner (knownPlugins));
        #endif
     }
@@ -1194,7 +1201,7 @@ struct GraphDocumentComponent::PluginListBoxModel final : public ListBoxModel,
 
     bool isOverSelectedRow = false;
 
-   #if JUCE_IOS
+   #if JUCE_IOS || JUCE_ANDROID
     std::unique_ptr<AUScanner> scanner;
    #endif
 
diff --git a/extras/AudioPluginHost/Source/UI/MainHostWindow.cpp b/extras/AudioPluginHost/Source/UI/MainHostWindow.cpp
index 1ca2f1eaf..eb1cad980 100644
--- a/extras/AudioPluginHost/Source/UI/MainHostWindow.cpp
+++ b/extras/AudioPluginHost/Source/UI/MainHostWindow.cpp
@@ -26,6 +26,7 @@
 #include <JuceHeader.h>
 #include "MainHostWindow.h"
 #include "../Plugins/InternalPlugins.h"
+#include "aap_audio_plugin_client/aap_audio_plugin_client.h"
 
 constexpr const char* scanModeKey = "pluginScanMode";
 
@@ -307,6 +308,7 @@ MainHostWindow::MainHostWindow()
 {
     formatManager.addDefaultFormats();
     formatManager.addFormat (new InternalPluginFormat());
+    formatManager.addFormat (new juceaap::AndroidAudioPluginFormat());
 
     auto safeThis = SafePointer<MainHostWindow> (this);
     RuntimePermissions::request (RuntimePermissions::recordAudio,
@@ -468,6 +470,7 @@ void MainHostWindow::changeListenerCallback (ChangeBroadcaster* changed)
     {
         menuItemsChanged();
 
+#if !ANDROID // FIXME: this premises that plugin query results can be manually updated, which does not apply to Android app.
         // save the plugin list every time it gets changed, so that if we're scanning
         // and it crashes, we've still saved the previous ones
         if (auto savedPluginList = std::unique_ptr<XmlElement> (knownPluginList.createXml()))
@@ -475,6 +478,7 @@ void MainHostWindow::changeListenerCallback (ChangeBroadcaster* changed)
             getAppProperties().getUserSettings()->setValue ("pluginList", savedPluginList.get());
             getAppProperties().saveIfNeeded();
         }
+#endif
     }
     else if (graphHolder != nullptr && changed == graphHolder->graph.get())
     {
